name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    # if: github.ref == 'refs/heads/master'
    name: Deploy on ECS
    runs-on: ubuntu-18.04
    needs: [build]
    env:
      ECR_REGISTRY: ${{ secrets.ECR_URI }}
      IMAGE_TAG: latest
    steps:
    - uses: actions/checkout@v2
    - name: Build Docker image
      run: |
        docker build -t $ECR_REGISTRY:$IMAGE_TAG .
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{secrets.AWS_REGION}}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Push image to Amazon ECR
      id: build-image
      run: |
        docker push $ECR_REGISTRY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY:$IMAGE_TAG"
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition concert_curation_runner \
        --query taskDefinition > task-definition.json
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: concert_curation_app
        image: ${{ steps.build-image.outputs.image }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}